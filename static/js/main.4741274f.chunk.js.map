{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/CounterButton.js","components/Header.js","containers/ErrorBoundary.js","components/SearchBox.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","console","log","map","robot","i","key","Scroll","style","overflow","border","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","Component","Header","ErrorBoundary","hasError","error","info","SearchBox","type","placeholder","onChange","search","App","onRequestRobots","searchField","onSearch","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","HotApp","hot","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4741274f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = (props) => {\r\n    // console.log('Card.js')\r\n\r\n    const {name,email,id} = props\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) => {\r\n    console.log('CardList.js')\r\n\r\n    // const robotArray = robots.map((robot,i) =>{\r\n    //     return <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />\r\n    // })\r\n    // throw new Error('err')\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((robot,i) =>{\r\n                    return (\r\n                        <Card \r\n                            key={robot.id} \r\n                            id={robot.id} \r\n                            name={robot.name} \r\n                            email={robot.email} \r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflow: 'scroll', border:'5px solid black', height:'500px'}}>\r\n           {props.children} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React, { Component } from 'react'\r\n\r\nexport default class CounterButton extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            count:0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        // console.log('nextProps',nextProps)\r\n        // console.log('nextState',nextState)\r\n        if(this.state.count !== nextState.count){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState( state => {\r\n            return {count: state.count +1}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('CounterButton')\r\n        return (\r\n            <div>\r\n               <button color={this.props.color} onClick={this.updateCount}>Counter{this.state.count}</button> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport CounterButton from './CounterButton'\r\nexport default class Header extends Component {\r\n    \r\n    // shouldComponentUpdate(nextProps, nextState){\r\n    //     return false;\r\n    // }\r\n\r\n    render() {\r\n        console.log('Header')\r\n        return (\r\n            <div>\r\n                <h1 className='f1'>RoboFriends</h1> \r\n                <CounterButton color={'red'} />               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n    render() {\r\n        if(this.state.hasError){\r\n            return (\r\n                <div>\r\n                    <h1>Some Error Occurred</h1>\r\n                </div>\r\n            ) \r\n        } else {\r\n            return (\r\n                <div>\r\n                    {this.props.children}\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nconst SearchBox = (props) => {\r\n    console.log('Search')\r\n    return (\r\n        <div>\r\n            <input \r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                placeholder=\"search robot\" \r\n                onChange={props.search}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default SearchBox;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\nimport Header from '../components/Header'\r\nimport ErrorBoundary from './ErrorBoundary'\r\n// import {robots} from '../components/robots';\r\nimport SearchBox from '../components/SearchBox'\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n    // console.log(\"state\", state)\r\n  return {\r\n      searchField: state.searchRobots.searchField,\r\n      robots: state.requestRobots.robots,\r\n      isPending: state.requestRobots.isPending,\r\n      error: state.requestRobots.error\r\n  }      \r\n}\r\n\r\nconst mapDispatchtoProps = (dispatch) => {\r\n    // console.log(\"dispatch\", dispatch)\r\n\r\n    return {\r\n        onSearch: (event) => dispatch(setSearchField(event.target.value)),\r\n        // onRequestRobots: () => requestRobots(dispatch)\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }    \r\n}\r\n\r\nclass App extends Component {\r\n    // constructor(){\r\n    //     super();\r\n    //     this.state = {\r\n    //         robots: [],\r\n    //         // inputSearch: ''\r\n    //     }\r\n    // }\r\n    componentDidMount(){\r\n        console.log('App.js')\r\n\r\n        // console.log(this.props.store.getState())\r\n        this.props.onRequestRobots();\r\n    }\r\n    // onSearch = (event) => {\r\n    //     this.setState({inputSearch:event.target.value})\r\n    // }\r\n    render(){\r\n        // const { robots } = this.state;\r\n        const { searchField, onSearch, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter((robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        }))\r\n\r\n        return isPending ?\r\n            <h1>Loading....</h1> :\r\n        \r\n             (\r\n                <div className='tc'>\r\n                    <ErrorBoundary>\r\n                        <Header />\r\n                        <SearchBox search={onSearch} />\r\n                        <Scroll>\r\n                            <CardList robots={filteredRobots}/> \r\n                        </Scroll>\r\n                    </ErrorBoundary>\r\n                    \r\n                    \r\n                </div>\r\n            )\r\n        \r\n        \r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchtoProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => {\r\n    // console.log(\"text\",text);\r\n    return {\r\n        type:CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }  \r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload:data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n     \r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    // console.log(\"action\",action.type)\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD :\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n            // return {...state, searchField:action.payload};\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending : 'false',\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    // console.log(\"action\",action.type)\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING :\r\n            return Object.assign({}, state, {isPending: true});\r\n            // return {...state, searchField:action.payload};\r\n        case REQUEST_ROBOTS_SUCCESS :\r\n            return Object.assign({}, state, {robots:action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED :\r\n            return Object.assign({}, state, {error:action.payload, isPending: false});\r\n        default: \r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport App from'./containers/App';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport { searchRobots,requestRobots } from './reducers';\r\nimport './wdyr';\r\n \r\nimport 'react-hot-loader';\r\nimport {hot} from 'react-hot-loader/root';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\nconst HotApp = hot(App);\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider  store={store}>\r\n       <HotApp />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}