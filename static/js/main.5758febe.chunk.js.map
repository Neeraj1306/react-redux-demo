{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","containers/ErrorBoundary.js","components/SearchBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","robot","i","key","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","SearchBox","type","placeholder","onChange","search","App","onSearch","event","inputSearch","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbF,SAACC,GAAW,IACdC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GAClB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,4BAAKF,GACL,2BAAIC,MCiBLK,EAvBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAKf,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKF,EAAMP,GACXA,GAAIO,EAAMP,GACVF,KAAMS,EAAMT,KACZC,MAAOQ,EAAMR,aCP1BW,G,MARA,SAACb,GACZ,OACI,yBAAKc,MAAO,CAAEC,SAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAC/DjB,EAAMkB,YCHGC,E,kDACjB,WAAYnB,GAAO,IAAD,8BACd,gBACKoB,MAAQ,CACTC,UAAU,GAHA,E,8DAMAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAGG,KAAKJ,MAAMC,SAEN,6BACI,oDAKJ,6BACKG,KAAKxB,MAAMkB,c,GApBWQ,aCY5BC,EAZG,SAAC3B,GACf,OACI,6BACI,2BACII,UAAU,mCACVwB,KAAK,SACLC,YAAY,eACZC,SAAU9B,EAAM+B,WC4CjBC,E,kDA5CX,aAAc,IAAD,8BACT,gBAcJC,SAAW,SAACC,GACR,EAAKT,SAAS,CAACU,YAAYD,EAAME,OAAOC,SAdxC,EAAKjB,MAAQ,CACTZ,OAAQ,GACR2B,YAAa,IAJR,E,gEAOO,IAAD,OACfG,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKjB,SAAS,CAACjB,OAAOkC,S,+BAMrB,IAAD,OACEC,EAAiBnB,KAAKJ,MAAMZ,OAAOoC,QAAQ,SAAAlC,GAC7C,OAAOA,EAAMT,KAAK4C,cAAcC,SAAS,EAAK1B,MAAMe,YAAYU,kBAEpE,OAA8B,IAA3BrB,KAAKJ,MAAMZ,OAAOuC,OACV,2CAGH,yBAAK3C,UAAU,MACX,kBAAC,EAAD,KACI,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAW2B,OAAQP,KAAKS,WACxB,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUzB,OAAQmC,W,GAhC3BjB,a,MCICsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACL0C,QAAQ1C,MAAMA,EAAM2C,a","file":"static/js/main.5758febe.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = (props) => {\n    const {name,email,id} = props\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card","import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({robots}) => {\n    // const robotArray = robots.map((robot,i) =>{\n    //     return <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />\n    // })\n    // throw new Error('err')\n    return (\n        <div>\n            {\n                robots.map((robot,i) =>{\n                    return (\n                        <Card \n                            key={robot.id} \n                            id={robot.id} \n                            name={robot.name} \n                            email={robot.email} \n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList","import React from 'react'\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflow: 'scroll', border:'5px solid black', height:'500px'}}>\n           {props.children} \n        </div>\n    )\n}\n\nexport default Scroll","import React, { Component } from 'react'\n\nexport default class ErrorBoundary extends Component {\n    constructor(props){\n        super();\n        this.state = {\n            hasError: false\n        }\n    }\n    componentDidCatch(error,info){\n        this.setState({hasError:true})\n    }\n    render() {\n        if(this.state.hasError){\n            return (\n                <div>\n                    <h1>Some Error Occurred</h1>\n                </div>\n            ) \n        } else {\n            return (\n                <div>\n                    {this.props.children}\n                </div>\n            )\n        }\n        \n    }\n}\n","import React from 'react'\n\nconst SearchBox = (props) => {\n    return (\n        <div>\n            <input \n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\" \n                placeholder=\"search robot\" \n                onChange={props.search}\n            />\n        </div>\n    )\n}\nexport default SearchBox;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport './App.css'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from './ErrorBoundary'\nimport {robots} from '../components/robots';\nimport SearchBox from '../components/SearchBox'\n\n class App extends Component {\n    constructor(){\n        super();\n        this.state = {\n            robots: [],\n            inputSearch: ''\n        }\n    }\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=>{\n            return response.json();\n        })\n        .then(users=>{\n            this.setState({robots:users});\n        })\n    }\n    onSearch = (event) => {\n        this.setState({inputSearch:event.target.value})\n    }\n    render(){\n        const filteredRobots = this.state.robots.filter((robot => {\n            return robot.name.toLowerCase().includes(this.state.inputSearch.toLowerCase())\n        }))\n        if(this.state.robots.length===0){\n            return(<h1>Loading....</h1>)\n        } else {\n            return (\n                <div className='tc'>\n                    <ErrorBoundary>\n                        <h1 className='f1'>RoboFriends</h1>\n                        <SearchBox search={this.onSearch} />\n                        <Scroll>\n                            <CardList robots={filteredRobots}/> \n                        </Scroll>\n                    </ErrorBoundary>\n                    \n                    \n                </div>\n            )\n        }\n        \n    }\n    \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from'./containers/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}